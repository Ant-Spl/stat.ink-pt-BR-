name: 'CI'
on:
  - 'push'
  - 'pull_request'
jobs:
  ciDoesNotSkip:
    name: "Tag Check: `[ci skip]`"
    runs-on: 'ubuntu-latest'
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      - run: 'echo "CI Running"'

  phpSyntaxCheck:
    name: 'PHP Syntax Check'
    strategy:
      matrix:
        php_version:
          - '7.4'
    runs-on: 'ubuntu-latest'
    needs:
      - 'ciDoesNotSkip'
    if: "!contains(github.event.head_commit.message, '[no php]')"
    steps:
      - uses: 'actions/checkout@v2'

      - name: 'Set PHP environment (PHP ${{ matrix.php_version }})'
        run: |
          sudo update-alternatives --set php /usr/bin/php${{ matrix.php_version }}
          php -v

      - name: 'Syntax Check'
        run: find . \( -type d \( -name '.git' -or -name 'vendor' -or -name 'runtime' \) -prune \) -or \( -type f -name '*.php' -print \) | LANG=C sort | xargs -n 1 php -l

  phpStyleCheck:
    name: 'PHP Coding Style'
    runs-on: 'ubuntu-latest'
    needs:
      - 'ciDoesNotSkip'
    if: "!contains(github.event.head_commit.message, '[no php]')"
    steps:
      - uses: 'actions/checkout@v2'

      - name: 'Fetch Latest phpcs.phar'
        run: 'curl -fsSL -o phpcs "https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar"'

      - name: 'Set PHP Environment (PHP 7.4)'
        run: 'sudo update-alternatives --set php /usr/bin/php7.4'

      - name: 'Show Versions'
        run: |
          php -v
          php phpcs --version

      - name: 'Run PHPCS'
        run: 'php phpcs -p'

  phpCheckAuthor:
    name: 'Check Author'
    runs-on: 'ubuntu-latest'
    needs:
      - 'ciDoesNotSkip'
    if: "!contains(github.event.head_commit.message, '[no php]') && !contains(github.event.head_commit.message, '[no author]')"
    steps:
      - uses: 'actions/checkout@v2'
        with:
          fetch-depth: 0

      - name: 'Composer cache'
        uses: 'actions/cache@v2'
        with:
          path: ~/.cache/composer/files
          key: author-composer-cache-${{ github.sha }}
          restore-keys: author-composer-cache-

      - name: 'Set up PHP environment'
        run: sudo update-alternatives --set php /usr/bin/php7.4

      - name: 'Prepare for phpcq/author-validation'
        run: |
          rm -f composer.json
          mv composer.check-author.json composer.json

      - name: 'Install phpcq/author-validation'
        uses: nick-invision/retry@v2
        with:
          timeout_seconds: 300
          max_attempts: 3
          retry_on: error
          command: 'rm -rf composer.lock vendor && make vendor'

      - name: 'Execute check-author.php'
        run: |
          patch -p0 -d vendor/phpcq/author-validation < data/patch/check-author.nofollow.patch
          php -d memory_limit=-1 vendor/bin/check-author.php --php-files \
            actions \
            assets \
            commands \
            components \
            controllers \
            messages \
            migrations \
            models

  setupNPM:
    name: 'Setup NPM (install node_modules)'
    runs-on: 'ubuntu-latest'
    needs:
      - 'ciDoesNotSkip'
    steps:
      - uses: 'actions/checkout@v2'

      - uses: 'actions/cache@v2'
        with:
          path: |
            node_modules
            ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: 'Install NPM packages'
        run: 'npm install'

  jsStyleCheck:
    name: 'JS Coding Style'
    runs-on: 'ubuntu-latest'
    needs:
      - 'ciDoesNotSkip'
      - 'setupNPM'
    steps:
      - uses: 'actions/checkout@v2'

      - uses: 'actions/cache@v2'
        with:
          path: |
            node_modules
            ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}

      - name: 'Run ESLint'
        run: 'npx eslint "resources/**/*.es" "resources/**/*.js"'

  cssStyleCheck:
    name: 'CSS Coding Style'
    runs-on: 'ubuntu-latest'
    needs:
      - 'ciDoesNotSkip'
      - 'setupNPM'
    steps:
      - uses: 'actions/checkout@v2'

      - uses: 'actions/cache@v2'
        with:
          path: |
            node_modules
            ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}

      - name: 'Run StyleLint'
        run: 'npx stylelint "resources/**/*.scss" "resources/**/*.css"'

  setupComposer:
    name: 'Setup Composer (install vendor)'
    runs-on: 'ubuntu-latest'
    needs:
      - 'ciDoesNotSkip'
      - 'phpSyntaxCheck'
    if: "!contains(github.event.head_commit.message, '[no php]')"
    steps:
      - name: 'Setup PHP'
        run: |
          sudo apt install -y php7.4-intl
          sudo update-alternatives --set php /usr/bin/php7.4

      - uses: 'actions/checkout@v2'

      - uses: 'actions/cache@v2'
        with:
          path: |
            vendor
            ~/.cache/composer/files
          key: composer-${{ hashFiles('composer.lock') }}
          restore-keys: composer-

      - name: 'Install composer packages'
        run: |
          make composer.phar
          make vendor

  licenseCheck:
    name: 'Check license'
    needs:
      - 'ciDoesNotSkip'
      - 'setupComposer'
      - 'setupNPM'
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Setup PHP env'
        run: |
          sudo apt install -y brotli jpegoptim libxml2-utils php7.4-intl
          sudo update-alternatives --set php /usr/bin/php7.4

      - uses: 'actions/checkout@v2'

      - uses: 'actions/setup-node@v1'

      - uses: 'actions/cache@v2'
        with:
          path: |
            vendor
            ~/.cache/composer/files
          key: composer-${{ hashFiles('composer.lock') }}

      - uses: 'actions/cache@v2'
        with:
          path: |
            node_modules
            ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}

      - name: 'Basic setup the app'
        run: 'make init-no-resource'

      - name: 'Check licenses'
        run: './yii license'

  phpUnit:
    name: 'Build & Test'
    needs:
      - 'ciDoesNotSkip'
      - 'phpSyntaxCheck'
      - 'setupComposer'
      - 'setupNPM'
    if: "!contains(github.event.head_commit.message, '[no php]')"
    strategy:
      matrix:
        php_version:
          - '7.4'
        pgsql_version:
          - '9.5-alpine'    # minimum requirement
          - 'alpine'        # latest version
    services:
      postgres:
        image: "postgres:${{ matrix.pgsql_version }}"
        ports:
          - '5432:5432'
        env:
          POSTGRES_USER: 'statink'
          POSTGRES_PASSWORD: 'statink'
          POSTGRES_DB: 'statink'
          POSTGRES_INITDB_ARGS: '-E UTF-8 --locale=en_US.UTF8 -k'
        options: '--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5'
    env:
      GEOIP_LICENSE_KEY: '${{ secrets.GEOIP_LICENSE_KEY }}'
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Setup PHP env'
        run: |
          sudo apt install -y brotli jpegoptim libxml2-utils php${{ matrix.php_version }}-intl
          sudo update-alternatives --set php /usr/bin/php${{ matrix.php_version }}

      - uses: 'actions/checkout@v2'

      - uses: 'actions/setup-node@v1'
        with:
          node-version: '12.x'

      - uses: 'actions/cache@v2'
        with:
          path: |
            vendor
            ~/.cache/composer/files
          key: composer-${{ hashFiles('composer.lock') }}

      - uses: 'actions/cache@v2'
        with:
          path: |
            node_modules
            ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}

      - name: 'Basic setup the app'
        run: 'make init'

      - name: 'Reset DB config'
        run: './yii secret/db localhost statink'

      - name: 'Migrate DB'
        run: 'make migrate-db'

      - name: 'Run Unit test'
        run: 'make test'
